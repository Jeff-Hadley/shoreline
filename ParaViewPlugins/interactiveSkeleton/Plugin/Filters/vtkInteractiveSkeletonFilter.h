/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkInteractiveSkeletonFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkInteractiveSkeletonFilter - generate scalars along a specified direction
// .SECTION Description
// vtkInteractiveSkeletonFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef vtkInteractiveSkeletonFilter_h
#define vtkInteractiveSkeletonFilter_h

#include "interactiveSkeletonFiltersModule.h" // for export macro
#include "vtkDoubleArray.h"

  // Gives access to macros for communication with the UI
#include "vtkFiltersCoreModule.h"
#include "vtkGeometryFilter.h"

class vtkDoubleArray;

class INTERACTIVESKELETONFILTERS_EXPORT vtkInteractiveSkeletonFilter : public vtkGeometryFilter
{
public:
  static vtkInteractiveSkeletonFilter* New();
  vtkTypeMacro(vtkInteractiveSkeletonFilter, vtkGeometryFilter);

  vtkSetMacro(HandlePositions, vtkDoubleArray*);
  // vtkGetMacro(HandlePositions, vtkDoubleArray*);
  void SetPoints(vtkDoubleArray* pts);
  void SetNumberOfPoints(int npts);
  void PrintSelf(ostream& os, vtkIndent indent) override;

  // Pipeline functions:
  int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *)override;
  // Specifies the type of the input objects
  int FillInputPortInformation(int, vtkInformation *info) override;
  // Specifies the type of the output object.
  int FillOutputPortInformation(int, vtkInformation *info) override;

  void SetPoint(vtkIdType id, double x, double y, double z);
  vtkIdType GetNumberOfPoints(){
    return this->Points->GetNumberOfPoints();
  }

  vtkSetMacro(dummyVar, int);
  vtkGetMacro(dummyVar, int);

protected:
  vtkInteractiveSkeletonFilter();
  ~vtkInteractiveSkeletonFilter();
  int RequestInformation(
    vtkInformation *,
    vtkInformationVector **,
    vtkInformationVector *) override;

private:
  // Data set by the UI and used by the algorithm
  vtkDoubleArray* HandlePositions = nullptr;
  vtkPoints* Points = nullptr;

  int dummyVar = 0;

  vtkInteractiveSkeletonFilter(const vtkInteractiveSkeletonFilter&) = delete;
  void operator=(const vtkInteractiveSkeletonFilter&) = delete;
};

#endif

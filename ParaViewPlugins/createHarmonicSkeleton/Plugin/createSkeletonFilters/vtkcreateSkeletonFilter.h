/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkcreateSkeletonFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkcreateSkeletonFilter - generate scalars along a specified direction
// .SECTION Description
// vtkcreateSkeletonFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef vtkcreateSkeletonFilter_h
#define vtkcreateSkeletonFilter_h

#include "createSkeletonFiltersModule.h" // for export macro
#include "vtkElevationFilter.h"

// Gives access to macros for communication with the UI
#include "vtkFiltersCoreModule.h"
#include "vtkGeometryFilter.h"

class CREATESKELETONFILTERS_EXPORT vtkcreateSkeletonFilter : public vtkGeometryFilter
{
public:
  static vtkcreateSkeletonFilter* New();
  vtkTypeMacro(vtkcreateSkeletonFilter, vtkGeometryFilter);
  void PrintSelf(ostream& os, vtkIndent indent) override;

  // Communicate with the UI
  vtkSetMacro(boneCount, int);
  vtkGetMacro(boneCount, int);

  vtkSetMacro(skeletonDirection, int);
  vtkGetMacro(skeletonDirection, int);

  // Pipeline functions:
  int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *)override;
  // Specifies the type of the input objects
  int FillInputPortInformation(int, vtkInformation *info)override;
  // Specifies the type of the output object.
  int FillOutputPortInformation(int, vtkInformation *info)override;


protected:
  vtkcreateSkeletonFilter();
  ~vtkcreateSkeletonFilter();
  int RequestInformation(
    vtkInformation *,
    vtkInformationVector **,
    vtkInformationVector *) override;

private:
  // Data set by the UI and used by the algorithm
  int boneCount = 1;
  int skeletonDirection = 0;

  vtkcreateSkeletonFilter(const vtkcreateSkeletonFilter&) = delete;
  void operator=(const vtkcreateSkeletonFilter&) = delete;
};

#endif
